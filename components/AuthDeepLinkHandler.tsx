import { router } from 'expo-router';
import { useEffect } from 'react';
import { Linking } from 'react-native';
import { supabase } from '../lib/supabase';

export default function AuthDeepLinkHandler() {
  useEffect(() => {
    // Listener para deep links quando o app est√° aberto
    const handleDeepLink = (url: string) => {
      console.log('üîó Deep link recebido:', url);
      
      // Verificar se √© callback do Google OAuth (redirect do Supabase)
      if (url.includes('access_token') && url.includes('refresh_token')) {
        console.log('üîÑ Processando callback do Google OAuth...');
        
        // Extrair par√¢metros da URL
        const urlObj = new URL(url);
        const accessToken = urlObj.searchParams.get('access_token');
        const refreshToken = urlObj.searchParams.get('refresh_token');
        const type = urlObj.searchParams.get('type');
        const expiresIn = urlObj.searchParams.get('expires_in');
        
        console.log('üìã Par√¢metros OAuth extra√≠dos:', { 
          accessToken: accessToken ? 'presente' : 'ausente',
          refreshToken: refreshToken ? 'presente' : 'ausente', 
          type,
          expiresIn 
        });
        
        if (accessToken && refreshToken) {
          console.log('üîê Definindo sess√£o OAuth...');
          
          // Definir a sess√£o com os tokens do OAuth
          supabase.auth.setSession({
            access_token: accessToken,
            refresh_token: refreshToken,
          }).then(async ({ data, error }) => {
            if (error) {
              console.error('‚ùå Erro ao definir sess√£o OAuth:', error);
              return;
            }
            
            console.log('‚úÖ Sess√£o OAuth definida com sucesso:', data);
            console.log('üë§ Usu√°rio OAuth:', data.user);
            console.log('üìß Email confirmado?', data.user?.email_confirmed_at);
            
            // Verificar se a sess√£o foi realmente salva
            const { data: { session } } = await supabase.auth.getSession();
            console.log('üîç Sess√£o verificada ap√≥s setSession:', session);
            
            if (session && session.user) {
              // Verificar se o usu√°rio existe na tabela users antes de redirecionar
              const { checkUserExists } = await import('../services/supabase/userService');
              const userCheck = await checkUserExists(data.user.id);
              
              if (userCheck.error) {
                console.error('‚ùå Erro ao verificar usu√°rio:', userCheck.error);
                return;
              }
              
              // Navegar baseado no status do usu√°rio
              if (data.user?.email_confirmed_at) {
                if (userCheck.exists) {
                  console.log('üéØ Usu√°rio com email confirmado e perfil completo, redirecionando para agenda');
                  router.replace('/(tabs)/agenda');
                } else {
                  console.log('üë§ Usu√°rio com email confirmado mas sem perfil, redirecionando para cadastro');
                  router.replace('/cadastro-usuario');
                }
              } else {
                console.log('üìß Email n√£o confirmado, redirecionando para confirma√ß√£o');
                router.replace('/email-confirmation');
              }
            } else {
              console.error('‚ùå Sess√£o OAuth n√£o foi salva corretamente');
            }
          });
        }
      }
      // Callback original para email confirmation
      else if (url.includes('marcaai://auth/callback')) {
        // Extrair par√¢metros da URL
        const urlObj = new URL(url);
        const accessToken = urlObj.searchParams.get('access_token');
        const refreshToken = urlObj.searchParams.get('refresh_token');
        const type = urlObj.searchParams.get('type');
        
        console.log('Par√¢metros extra√≠dos:', { accessToken, refreshToken, type });
        
        if (accessToken && refreshToken && type === 'signup') {
          console.log('Definindo sess√£o com tokens...');
          
          // Trocar o c√≥digo pela sess√£o
          supabase.auth.setSession({
            access_token: accessToken,
            refresh_token: refreshToken,
          }).then(async ({ data, error }) => {
            if (error) {
              console.error('Erro ao definir sess√£o:', error);
              return;
            }
            
            console.log('Sess√£o definida com sucesso:', data);
            console.log('Usu√°rio na sess√£o:', data.user);
            console.log('Email confirmado?', data.user?.email_confirmed_at);
            
            // Verificar se a sess√£o foi realmente salva
            const { data: { session } } = await supabase.auth.getSession();
            console.log('Sess√£o verificada ap√≥s setSession:', session);
            
            if (session && session.user) {
              // Verificar se o usu√°rio existe na tabela users antes de redirecionar
              const { checkUserExists } = await import('../services/supabase/userService');
              const userCheck = await checkUserExists(session.user.id);
              
              if (userCheck.error) {
                console.error('‚ùå Erro ao verificar usu√°rio:', userCheck.error);
                return;
              }
              
              // Navegar baseado no status do usu√°rio
              if (session.user.email_confirmed_at) {
                if (userCheck.exists) {
                  console.log('üéØ Usu√°rio com email confirmado e perfil completo, redirecionando para agenda');
                  router.replace('/(tabs)/agenda');
                } else {
                  console.log('üë§ Usu√°rio com email confirmado mas sem perfil, redirecionando para cadastro');
                  router.replace('/cadastro-usuario');
                }
              } else {
                console.log('üìß Email n√£o confirmado, redirecionando para confirma√ß√£o');
                router.replace('/email-confirmation');
              }
            } else {
              console.error('Sess√£o n√£o foi salva corretamente');
            }
          });
        }
      }
    };

    // Listener para quando o app √© aberto via deep link
    const subscription = Linking.addEventListener('url', ({ url }) => {
      handleDeepLink(url);
    });

    // Verificar se o app foi aberto via deep link
    Linking.getInitialURL().then((url) => {
      if (url) {
        handleDeepLink(url);
      }
    });

    return () => {
      subscription?.remove();
    };
  }, []);

  return null; // Este componente n√£o renderiza nada
}
